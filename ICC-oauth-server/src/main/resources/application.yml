server:
  port: 8043                    # 指定该Eureka实例的端口
spring:
  profiles:
    active: dev
#配置日志
logging:
  #配置日志文件路径 不同目录下的日志可配置不同级别
  level:
    root: INFO
    org.springframework.cloud.sleuth: DEBUG
    # org.springframework.web.servlet.DispatcherServlet: DEBUG

# mybatis包的扫描，还有就是映射文件设置 mybatis tk插件的使用
mybatis:
  type-aliases-package: package com.sinosoft.entity.model
  mapper-locations: classpath:mapper/*Mapper.xml
  #配置驼峰下划线
  configuration:
    map-underscore-to-camel-case: true

mapper:
  not-empty: false
  identity: MYSQL


pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

feign:
  hystrix:
    enabled: true             #使用feign开启熔断器
  compression:
    request:
      enabled: true   # 配置请求GZIP压缩
      mime-types: text/xml,application/xml,application/json   # 配置压缩支持的MIME TYPE
      min-request-size: 2048   # 配置压缩数据大小的下限
    response:
      enabled: true    # 配置响应GZIP压缩

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 60000       #熔断超时时
---
spring:
  profiles: dev
  cloud:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://47.95.114.105:3306/test-oauth?useUnicode=true&characterEncoding=utf8&useSSL=false
    username: root
    password: 123456
    #下面为连接池补充设置
    initialSize: 5
    # 配置获取连接等待超时的时间   
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒 
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据 
    useGlobalDataSourceStat: true
  redis:
    database: 0 # Redis数据库索引（默认为0）
    host: localhost
    port: 6379
    pool:
      - max-active: 8
      - max-wait: 1
      - max-idle: 8
      - min-idle: 0
    timeout: 5000

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    preferIpAddress: true

---
spring:
  profiles: docker1
  cloud:
    config:
      uri: http://eureka-server1:8780/
      profile: dev            # profile对应config server所获取的配置文件中的{profile}
      label: master           # 指定git仓库的分支，对应config server所获取的配置文件的{label}
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server1:8761/eureka/,http://eureka-server2:8762/eureka/
  instance:
    prefer-ip-address: true
---
spring:
  profiles: docker2
  cloud:
    config:
      uri: http://eureka-server1:8780/
      profile: dev            # profile对应config server所获取的配置文件中的{profile}
      label: master           # 指定git仓库的分支，对应config server所获取的配置文件的{label}
server:
  port: 8872
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server1:8761/eureka/,http://eureka-server2:8762/eureka/
  instance:
    prefer-ip-address: true